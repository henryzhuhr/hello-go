// 语法版本为 protobuf3

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: src/framework/grcp/server-stream/proto/server_stream.proto

package server_stream_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ValueStream_GetValueStream_FullMethodName = "/ValueStream/GetValueStream"
)

// ValueStreamClient is the client API for ValueStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务端流式rpc，只要在响应数据前加stream（可定义多个服务,每个服务可定义多个接口）
type ValueStreamClient interface {
	GetValueStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error)
}

type valueStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewValueStreamClient(cc grpc.ClientConnInterface) ValueStreamClient {
	return &valueStreamClient{cc}
}

func (c *valueStreamClient) GetValueStream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ValueStream_ServiceDesc.Streams[0], ValueStream_GetValueStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValueStream_GetValueStreamClient = grpc.ServerStreamingClient[StreamResponse]

// ValueStreamServer is the server API for ValueStream service.
// All implementations must embed UnimplementedValueStreamServer
// for forward compatibility.
//
// 服务端流式rpc，只要在响应数据前加stream（可定义多个服务,每个服务可定义多个接口）
type ValueStreamServer interface {
	GetValueStream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error
	mustEmbedUnimplementedValueStreamServer()
}

// UnimplementedValueStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedValueStreamServer struct{}

func (UnimplementedValueStreamServer) GetValueStream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetValueStream not implemented")
}
func (UnimplementedValueStreamServer) mustEmbedUnimplementedValueStreamServer() {}
func (UnimplementedValueStreamServer) testEmbeddedByValue()                     {}

// UnsafeValueStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValueStreamServer will
// result in compilation errors.
type UnsafeValueStreamServer interface {
	mustEmbedUnimplementedValueStreamServer()
}

func RegisterValueStreamServer(s grpc.ServiceRegistrar, srv ValueStreamServer) {
	// If the following call pancis, it indicates UnimplementedValueStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ValueStream_ServiceDesc, srv)
}

func _ValueStream_GetValueStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ValueStreamServer).GetValueStream(m, &grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ValueStream_GetValueStreamServer = grpc.ServerStreamingServer[StreamResponse]

// ValueStream_ServiceDesc is the grpc.ServiceDesc for ValueStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValueStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ValueStream",
	HandlerType: (*ValueStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetValueStream",
			Handler:       _ValueStream_GetValueStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "src/framework/grcp/server-stream/proto/server_stream.proto",
}
